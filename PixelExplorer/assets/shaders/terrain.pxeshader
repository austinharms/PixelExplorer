#shader vertex
#version 330 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 uv;
layout(location = 3) in vec3 color;
uniform mat4 u_MVP;

out vec4 v_Color;
out vec3 v_Normal;

void main() {
	gl_Position = u_MVP * vec4(position, 1.0);
	v_Color = vec4(color, 1.0);
	v_Normal = normal;
};

#shader fragment
#version 330 core

layout(location = 0) out vec4 color;
uniform vec3 u_LightDirection;
uniform vec3 u_LightColor;
uniform vec3 u_CAMPOS;

in vec4 v_Color;
in vec3 v_Normal;

vec3 CalcDirLight(vec3 lightDir, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, TexCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
    return (ambient + diffuse + specular);
}  

void main() {
  color = v_Color;
};
