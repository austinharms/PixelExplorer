#shader vertex
#version 330 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec3 color;
uniform mat4 u_MVP;

out vec3 v_Color;
out vec3 v_Normal;
out vec3 v_Position;

void main() {
	gl_Position = u_MVP * vec4(position, 1.0);
	v_Position = vec3(gl_Position);
	v_Color = color;
	v_Normal = normal;
};

#shader fragment
#version 330 core

layout(location = 0) out vec4 color;
uniform vec3 u_LightDir;
uniform vec3 u_LightColor;
uniform vec3 u_CameraPos;

in vec3 v_Color;
in vec3 v_Normal;
in vec3 v_Position;

void main() {
    // ambient
    vec3 ambient = (u_LightColor * 0.2) * v_Color;
  	
    // diffuse 
    vec3 norm = normalize(v_Normal);
    vec3 lightDir = normalize(-u_LightDir);  
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = u_LightColor * diff * v_Color;  
    
    //// specular
    //vec3 viewDir = normalize(-v_Position);
    //vec3 reflectDir = reflect(-lightDir, norm);  
    //float spec = pow(max(dot(viewDir, reflectDir), 0.0), 0.3);
    //vec3 specular = u_LightColor * spec;  
        
    vec3 result = ambient + diffuse; // + specular;
    color = vec4(result, 1.0);
};
